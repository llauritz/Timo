

import 'dart:async';

import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';

class TimerText extends StatefulWidget {
  @override
  _TimerTextState createState() => _TimerTextState();
}

class _TimerTextState extends State<TimerText> {

  int startTime = 0;
  int elapsedTime = 0;
  SharedPreferences prefs;
  Timer timer = Timer.periodic(Duration(hours: 1), (timer) { });
  TimerUpdater timerUpdater = TimerUpdater();

  void initSharedPreferences()async{
    prefs = await SharedPreferences.getInstance();
    int prevStartTime = prefs.getInt("startTime");
    if(prevStartTime!=0){
      startTime = prevStartTime;
      print("timerUpdateTest - restored Time" + prevStartTime.toString());
      timer = Timer.periodic(Duration(seconds: 1), calculate);
      calculate(timer);
    }
    print("timerUpdateTest - init ready");
  }

  @override
  void initState(){
    // TODO: implement initState
    timer.cancel();
    initSharedPreferences();
    super.initState();
  }


  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: SafeArea(
        child: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
            Text(elapsedTime.toString()),
              MaterialButton(
                child: Text("start"),
                onPressed: timerUpdater.test(),
              ),
              MaterialButton(
                child: Text("stop"),
                onPressed: timerButtonStop,
              ),
              MaterialButton(
                child: Text("calculate"),
                onPressed: () {},
              )
            ],
          ),
        ),
      ),
    );
  }

  void timerButtonStart(){
    if(timer.isActive == false){
      timer = Timer.periodic(Duration(seconds: 1), calculate);
      startTime = DateTime.now().microsecondsSinceEpoch;
      prefs.setInt("startTime", startTime);
      print("timerUpdateTest - started, startTime = " + startTime.toString());
    }
  }

  void timerButtonStop(){
    timer.cancel();
    startTime = 0;
    prefs.setInt("startTime", startTime);
    calculate(timer);
  }

  void calculate(Timer timer){
    print("timerUpdateTest - start Time" + startTime.toString());
    print("timerUpdateTest - current Time" + DateTime.now().microsecondsSinceEpoch.toString());

    if(startTime != 0) {
      setState(() {
        int elapsedTimeMilliseconds = DateTime
            .now()
            .microsecondsSinceEpoch - startTime;
        DateTime elapsedTimeDate = DateTime.fromMicrosecondsSinceEpoch(
            elapsedTimeMilliseconds);
        elapsedTime = elapsedTimeDate.second;
      });
    }
  }
}

class TimerUpdater extends StatefulWidget {
  @override
  _TimerUpdaterState createState() => _TimerUpdaterState();

  final _TimerUpdaterState tus = _TimerUpdaterState();

  timerButtonStart() {
    tus.timerButtonStart();
  }



}

class _TimerUpdaterState extends State<TimerUpdater> {

  int startTime = 0;
  int elapsedTime = 0;
  Timer timer = Timer.periodic(Duration(seconds: 1), (timer) { });
  SharedPreferences prefs;

  void initSharedPreferences()async{
    prefs = await SharedPreferences.getInstance();
    int prevStartTime = prefs.getInt("startTime");
    if(prevStartTime!=0){
      startTime = prevStartTime;
      print("timerUpdateTest - restored Time" + prevStartTime.toString());
      timer = Timer.periodic(Duration(seconds: 1), calculate);
      calculate(timer);
    }
    print("timerUpdateTest - init ready");
  }

  void timerButtonStart(){
    if(timer.isActive == false){
      timer = Timer.periodic(Duration(seconds: 1), calculate);
      startTime = DateTime.now().microsecondsSinceEpoch;
      prefs.setInt("startTime", startTime);
      print("timerUpdateTest - started, startTime = " + startTime.toString());
    }
  }

  @override
  Widget build(BuildContext context) {
    return Container();
  }
}

